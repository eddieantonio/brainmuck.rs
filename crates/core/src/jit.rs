//! Entry point for using the JIT-compiler.

use crate::program::{BrainmuckProgram, GetChar, PutChar};
use mmap_jit::{as_function, ExecutableRegion, WritableRegion};

/// A CompiledProgram takes an [ExecutableRegion] of code and allows you to run it as a Brainfuck
/// program.
pub struct CompiledProgram {
    code: ExecutableRegion,
}

/// The type of function generated by the compiler, as expressed in function pointer syntax:
type Program = fn(*mut u8, PutChar, GetChar) -> u64;
impl CompiledProgram {
    /// Initializes a CompiledProgram from the passed binary machine code.
    pub fn from_binary(binary: &[u8]) -> CompiledProgram {
        let mut mem = WritableRegion::allocate(binary.len()).unwrap();
        (&mut mem[0..binary.len()]).copy_from_slice(&binary);

        CompiledProgram {
            code: mem.into_executable().unwrap(),
        }
    }
}

impl BrainmuckProgram for CompiledProgram {
    fn run_with_custom_io(&self, universe: &mut [u8], putchar: PutChar, getchar: GetChar) {
        let program = unsafe { as_function!(self.code, Program) };

        program(universe.as_mut_ptr(), putchar, getchar);
    }
}
